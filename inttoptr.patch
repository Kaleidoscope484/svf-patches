diff --git a/include/SVF-FE/PAGBuilder.h b/include/SVF-FE/PAGBuilder.h
index 6e6f0f6..078125c 100644
--- a/include/SVF-FE/PAGBuilder.h
+++ b/include/SVF-FE/PAGBuilder.h
@@ -206,7 +206,6 @@ public:
 
     void visitExtractElementInst(ExtractElementInst &I);
 
-		Value* getIntToPtrSource(CastInst &I);
     void visitInsertElementInst(InsertElementInst &I)
     {
         addBlackHoleAddrEdge(getValueNode(&I));
diff --git a/lib/SVF-FE/PAGBuilder.cpp b/lib/SVF-FE/PAGBuilder.cpp
index a2df037..4bd308f 100644
--- a/lib/SVF-FE/PAGBuilder.cpp
+++ b/lib/SVF-FE/PAGBuilder.cpp
@@ -729,45 +729,6 @@ void PAGBuilder::visitGetElementPtrInst(GetElementPtrInst &inst)
     }*/
 }
 
-Value* PAGBuilder::getIntToPtrSource(CastInst &inst) {
-	std::vector<Instruction*> workList;
-	std::vector<Instruction*> visitedList;
-
-	workList.push_back(&inst);
-
-	while (!workList.empty()) {
-		Instruction* inst = workList.back();
-		workList.pop_back();
-		visitedList.push_back(inst);
-
-		// If we've reached a top-level variable, we track all its users
-		if (AllocaInst* stack = SVFUtil::dyn_cast<AllocaInst>(inst)) {
-			for (User* u: stack->users()) {
-				if (Instruction* inst = SVFUtil::dyn_cast<Instruction>(u)) {
-					if (std::find(visitedList.begin(), visitedList.end(), inst) == visitedList.end()) {
-						workList.push_back(inst);
-					}
-				}
-			}
-		} else {
-			// Do backward slice
-			// Get the operands
-			for (int i = 0; i < inst->getNumOperands(); i++) {
-				Value* op = inst->getOperand(i);
-				if (PtrToIntInst* ptrToIntInst = SVFUtil::dyn_cast<PtrToIntInst>(op)) {
-					return ptrToIntInst->getOperand(0);
-				}
-				if (Instruction* inst = SVFUtil::dyn_cast<Instruction>(op)) {
-					if (std::find(visitedList.begin(), visitedList.end(), inst) == visitedList.end()) {
-						workList.push_back(inst);
-					}
-				}
-			}
-		}
-	}
-	return nullptr;
-}
-
 /*
  * Visit cast instructions
  */
@@ -779,19 +740,8 @@ void PAGBuilder::visitCastInst(CastInst &inst)
 
     if (SVFUtil::isa<IntToPtrInst>(&inst))
     {
-			Value* srcVal = getIntToPtrSource(inst);
-			if (srcVal) {
-				NodeID src = getValueNode(srcVal);
-				addCopyEdge(src, dst);
-			} else {
-				assert(false && "Can't find inttoptr source, aborting!");
-				/*
-				// BlackHoleAddrEdge isn't handled at all
-				// so we just abort the analysis because we know we can't be sound
-				addBlackHoleAddrEdge(dst);
-				*/
-			}
-		}
+        addBlackHoleAddrEdge(dst);
+    }
     else
     {
         Value * opnd = inst.getOperand(0);
